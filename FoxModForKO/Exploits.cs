using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Object = UnityEngine.Object;
using PhotonPlayer = PJIKCJLCHHE;
using PhotonNetWork = PDEEDIKOEHC;
using UnityEngine;

class Exploits : IHackMenu, IStarted, IUpdate
{
    public string Name => "Exploits";

    private bool dndPlayer, kickAll;

    private SoundManager.GMFNLNMNDIN sound;

    private Vector2 ScrollSounds;
    public Action<int> Menu => (id) =>
    {
        if (GUILayout.Button("DNDPlayer: " + (dndPlayer ? "On" : "Off"), null))
        {
            dndPlayer = !dndPlayer;
        }
        kickAll = GUILayout.Toggle(kickAll, "KickAll", "Button", null);
        if (GUILayout.Button("Fixed Boat", null))
        {
            Physics.IgnoreLayerCollision(EntityBase.COEJBHHHCMF, LayerMask.NameToLayer("Water"), true);
            Physics.IgnoreLayerCollision(EntityBase.NEKNPHKOLIF, LayerMask.NameToLayer("Water"), true);
            Physics.IgnoreLayerCollision(EntityBase.PGLJDGCMLIB, LayerMask.NameToLayer("Water"), true);
        }
        if (GUILayout.Button("WallHack", null))
        {
            Nickname[] array = UnityEngine.Object.FindObjectsOfType<Nickname>();
            for (int i = 0; i < array.Length + 1; i++)
            {
                array[i].LKCDEOPLNCN(false);
            }
        }
        if (GUILayout.Button("TakeKubokAll", null))
        {
            foreach (var item in GameObject.FindObjectsOfType<EntityBase>())
            {
                if (item.BKFHOLFHJKE == BEDOMOKJJMN.GOLD_KUBOK)
                {
                    item.OLJBMCCCIEH(RenameHash.MyName);
                }
            }
        }
        if (GUILayout.Button("AllowChangesText", null))
        {
            foreach (var item in GameObject.FindObjectsOfType<EntityBase>())
            {
                item.MNANACGNEND = PhotonNetWork.FIMKAPAEODI.CGJMHEDPODP;
            }
        }
        if(GUILayout.Button("CrashNoFog", null))
        {
            GameObject.Destroy(GameObject.Find("ruuuun(Clone)"));
            GameObject.Destroy(GameObject.Find("flyyyy(Clone)"));
        }
        if (WorldGameObjectL.BJANBGEILJD == null)
        {
            GUILayout.Button("Dead: Off", null);
        }
        else
        if (GUILayout.Button("Dead: " + (WorldGameObjectL.BJANBGEILJD.BFADIICMBPN ? "On" : "Off"), null))
        {
            WorldGameObjectL.BJANBGEILJD.BFADIICMBPN = !WorldGameObjectL.BJANBGEILJD.BFADIICMBPN;
        }
        if(GUILayout.Button("Deathmatch", null))
        {
            new GameObject().AddComponent<Deathmatch>();
        }
        GUIF.BoxCast.ChildMenu("Sounds", () =>
        {
            if(GUILayout.Button("PlaySoundAll", null))
            {
                WorldGameObjectL.BJANBGEILJD.EEEAJLNOLMF(sound);
            }
            ScrollSounds = GUILayout.BeginScrollView(ScrollSounds ,new GUILayoutOption[] { GUILayout.Height(150F), GUILayout.Width(170F) });
            sound = (SoundManager.GMFNLNMNDIN)GUILayout.SelectionGrid((int)sound,Enum.GetNames(typeof(SoundManager.GMFNLNMNDIN)),1,null);
            GUILayout.EndScrollView();
        });
        GUI.DragWindow();
    };

    public bool IsActive { get; set; }
    public Rect Rect { get; set; }

    private PlayerNetwork playerNetworkdnd;

    public void Start()
    {
        
    }

    public void Update()
    {
        if(kickAll)
        {
            PhotonView photon = WorldGameObjectL.BJANBGEILJD.networkView;
            foreach (var player in PhotonNetWork.JDLAABPAIEA)
            {
                if(player.GetName() != RenameHash.MyName)
                    photon.PLJLBBNLIFL("ExitGame", player, new Il2CppSystem.Object[] { "Kick" });
            }
        }
        if (dndPlayer)
        {
            Ray ray = BuildAPI.GetRayInCamera();
            if (Input.GetKeyDown(KeyCode.Mouse0) && Physics.Raycast(ray, out RaycastHit hit, 999f, 1 << LayerMask.NameToLayer("Players")))
            {
                playerNetworkdnd = hit.collider.gameObject.GetComponent<PlayerNetwork>();
            }
            if (Input.GetKeyDown(KeyCode.Mouse1) && Physics.Raycast(ray, out RaycastHit hit2, 999f, 1 << LayerMask.NameToLayer("Terrain") | 1 << LayerMask.NameToLayer("Water")))
            {
                Vector3 vect = hit2.point + ray.direction.normalized * 0.01f;
                playerNetworkdnd.photonView.PLJLBBNLIFL("SetPos", PhotonTargets.All, new Il2CppSystem.Object[]
                        {
                       vect.BoxIl2CppObject()
                        });
            }
        }
    }
}
